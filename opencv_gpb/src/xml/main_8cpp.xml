<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="main_8cpp" kind="file">
    <compoundname>main.cpp</compoundname>
    <includes local="yes">globalPb.h</includes>
    <includes local="yes">contour2ucm.h</includes>
    <incdepgraph>
      <node id="2">
        <label>contour2ucm.h</label>
      </node>
      <node id="1">
        <label>globalPb.h</label>
      </node>
      <node id="0">
        <label>main.cpp</label>
        <link refid="main.cpp"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="main_8cpp_1a05b547416b5858fa1010f335f4f664df" prot="public" static="no" mutable="no">
        <type>cv::Mat</type>
        <definition>cv::Mat markers</definition>
        <argsstring></argsstring>
        <name>markers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/diyang/Documents/gPb-master/opencv_gpb/src/main.cpp" line="17" column="1" bodyfile="/Users/diyang/Documents/gPb-master/opencv_gpb/src/main.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a90a6a30955402c6530fff09ef72bc07e" prot="public" static="no" mutable="no">
        <type>cv::Mat</type>
        <definition>cv::Mat ucm2</definition>
        <argsstring></argsstring>
        <name>ucm2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/diyang/Documents/gPb-master/opencv_gpb/src/main.cpp" line="17" column="1" bodyfile="/Users/diyang/Documents/gPb-master/opencv_gpb/src/main.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1aaa050a25c0ca87cfbed1e8f477f15413" prot="public" static="no" mutable="no">
        <type>cv::Mat</type>
        <definition>cv::Mat bd</definition>
        <argsstring></argsstring>
        <name>bd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/diyang/Documents/gPb-master/opencv_gpb/src/main.cpp" line="17" column="1" bodyfile="/Users/diyang/Documents/gPb-master/opencv_gpb/src/main.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1aec2a192ef6baed12b58ff00df5a74404" prot="public" static="no" mutable="no">
        <type>cv::Mat</type>
        <definition>cv::Mat ll</definition>
        <argsstring></argsstring>
        <name>ll</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/diyang/Documents/gPb-master/opencv_gpb/src/main.cpp" line="17" column="1" bodyfile="/Users/diyang/Documents/gPb-master/opencv_gpb/src/main.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a7fb6298338d6337fbc0889a2eea1dffd" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int thres</definition>
        <argsstring></argsstring>
        <name>thres</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/diyang/Documents/gPb-master/opencv_gpb/src/main.cpp" line="19" column="1" bodyfile="/Users/diyang/Documents/gPb-master/opencv_gpb/src/main.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a2c09e929a6ea340fc9653cca414b11d3" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double c</definition>
        <argsstring></argsstring>
        <name>c</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/diyang/Documents/gPb-master/opencv_gpb/src/main.cpp" line="20" column="1" bodyfile="/Users/diyang/Documents/gPb-master/opencv_gpb/src/main.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="main_8cpp_1a9138416d9fb3f1a7751658219a20730f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cv::Point</type>
        <definition>cv::Point prev_pt</definition>
        <argsstring>(-1,-1)</argsstring>
        <name>prev_pt</name>
        <param>
          <type>-</type>
          <declname>1</declname>
        </param>
        <param>
          <type>-</type>
          <declname>1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/diyang/Documents/gPb-master/opencv_gpb/src/main.cpp" line="18" column="1"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a74122e84697f4d1e64e17c6d670c10c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void on_mouse</definition>
        <argsstring>(int event, int x, int y, int flags, void *param)</argsstring>
        <name>on_mouse</name>
        <param>
          <type>int</type>
          <declname>event</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/diyang/Documents/gPb-master/opencv_gpb/src/main.cpp" line="22" column="1" bodyfile="/Users/diyang/Documents/gPb-master/opencv_gpb/src/main.cpp" bodystart="22" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1acd0f39dcf5b0ffd24eb1e258857fb739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void on_trackbar</definition>
        <argsstring>(int, void *)</argsstring>
        <name>on_trackbar</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/diyang/Documents/gPb-master/opencv_gpb/src/main.cpp" line="43" column="1" bodyfile="/Users/diyang/Documents/gPb-master/opencv_gpb/src/main.cpp" bodystart="43" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/diyang/Documents/gPb-master/opencv_gpb/src/main.cpp" line="51" column="1" bodyfile="/Users/diyang/Documents/gPb-master/opencv_gpb/src/main.cpp" bodystart="51" bodyend="115"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>gPb<sp/>opencv<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>including<sp/>interactive<sp/>segmentation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Created<sp/>by<sp/>Di<sp/>Yang,<sp/>Vicent<sp/>Rabaud,<sp/>and<sp/>Gary<sp/>Bradski<sp/>on<sp/>31/05/13.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2013<sp/>The<sp/>Australian<sp/>National<sp/>University.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>and<sp/>Willow<sp/>Garage<sp/>inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;globalPb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;contour2ucm.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">cv::Mat<sp/>markers,<sp/>ucm2,<sp/>bd,<sp/>ll;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">cv::Point<sp/>prev_pt(-1,<sp/>-1);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thres;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_mouse(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>event,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>param<sp/>)</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ucm2.empty()<sp/>)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>event<sp/>==<sp/>cv::EVENT_LBUTTONUP<sp/>||<sp/>!(flags&amp;<sp/>cv::EVENT_FLAG_LBUTTON)<sp/>)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_pt<sp/>=<sp/>cv::Point(-1,-1);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>event<sp/>==<sp/>cv::EVENT_LBUTTONDOWN<sp/>)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_pt<sp/>=<sp/>cv::Point(x,y);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>event<sp/>==<sp/>cv::EVENT_MOUSEMOVE<sp/>&amp;&amp;<sp/>(flags<sp/>&amp;<sp/>cv::EVENT_FLAG_LBUTTON)<sp/>)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::Point<sp/>pt<sp/>=<sp/>cv::Point(x,y);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>prev_pt.x<sp/>&lt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_pt<sp/>=<sp/>pt;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::line(<sp/>markers,<sp/>prev_pt,<sp/>pt,<sp/>uchar(255),<sp/>3,<sp/>8,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::line(<sp/>ucm2,<sp/><sp/><sp/><sp/><sp/>prev_pt,<sp/>pt,<sp/>1.0,<sp/>3,<sp/>8,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_pt<sp/>=<sp/>pt;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::imshow(</highlight><highlight class="stringliteral">&quot;ucm&quot;</highlight><highlight class="normal">,<sp/>ucm2<sp/>);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_trackbar(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(double)thres/100-0.005;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c&lt;0.0)<sp/>c=0.0;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::ucm2seg(ucm2,<sp/>bd,<sp/>ll,<sp/>c,<sp/>SINGLE_SIZE);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::imshow(</highlight><highlight class="stringliteral">&quot;example&quot;</highlight><highlight class="normal">,<sp/>bd);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//info<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>system(</highlight><highlight class="stringliteral">&quot;clear&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;(before<sp/>running<sp/>it,<sp/>roughly<sp/>mark<sp/>the<sp/>areas<sp/>on<sp/>the<sp/>ucm<sp/>window)&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Press<sp/>&apos;r&apos;<sp/>-<sp/>resort<sp/>the<sp/>original<sp/>ucm,<sp/>and<sp/>remark&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Press<sp/>&apos;w&apos;<sp/>or<sp/>&apos;ENTER&apos;<sp/>-<sp/>conduct<sp/>interactive<sp/>segmentation&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Press<sp/>&apos;ESC&apos;<sp/>-<sp/>exit<sp/>the<sp/>program&quot;</highlight><highlight class="normal">&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>img0,<sp/>gPb_thin;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>gPb,<sp/>ucm;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;cv::Mat&gt;<sp/>gPb_ori;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>img0<sp/>=<sp/>cv::imread(argv[1],<sp/>-1);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::globalPb(img0,<sp/>gPb,<sp/>gPb_thin,<sp/>gPb_ori);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>you<sp/>wanna<sp/>conduct<sp/>interactive<sp/>segmentation<sp/>later,<sp/>choose<sp/>DOUBLE_SIZE,<sp/>otherwise<sp/>SINGLE_SIZE<sp/>will<sp/>do<sp/>either.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::contour2ucm(gPb,<sp/>gPb_ori,<sp/>ucm,<sp/>SINGLE_SIZE);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//back<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>markers<sp/>=<sp/>cv::Mat::zeros(ucm.size(),<sp/>CV_8UC1);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>ucm.copyTo(ucm2);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>thres<sp/>=<sp/>74;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::namedWindow(</highlight><highlight class="stringliteral">&quot;example&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::createTrackbar(</highlight><highlight class="stringliteral">&quot;Precision<sp/>:&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;example&quot;</highlight><highlight class="normal">,<sp/>&amp;thres,<sp/>100,<sp/>on_trackbar);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>on_trackbar(thres,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::imshow(</highlight><highlight class="stringliteral">&quot;Original&quot;</highlight><highlight class="normal">,<sp/>img0);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::imshow(</highlight><highlight class="stringliteral">&quot;gPb&quot;</highlight><highlight class="normal">,<sp/><sp/>gPb);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::imshow(</highlight><highlight class="stringliteral">&quot;gPb_thin&quot;</highlight><highlight class="normal">,<sp/>gPb_thin);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::imshow(</highlight><highlight class="stringliteral">&quot;ucm&quot;</highlight><highlight class="normal">,<sp/>ucm2);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::setMouseCallback(</highlight><highlight class="stringliteral">&quot;ucm&quot;</highlight><highlight class="normal">,<sp/>on_mouse,<sp/>0);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>cv::waitKey(0);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ch<sp/>==<sp/>27)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//restore<sp/>everything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markers<sp/>=<sp/>cv::Mat::zeros(markers.size(),<sp/>CV_8UC1);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ucm.copyTo(ucm2);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::imshow(</highlight><highlight class="stringliteral">&quot;ucm&quot;</highlight><highlight class="normal">,<sp/>ucm2);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::destroyWindow(</highlight><highlight class="stringliteral">&quot;boundary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::destroyWindow(</highlight><highlight class="stringliteral">&quot;labels&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal"><sp/>||<sp/>ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::Mat<sp/>boundary,<sp/>labels,<sp/>seeds;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;<sp/>vector&lt;cv::Point&gt;<sp/>&gt;<sp/>contours;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;cv::Vec4i&gt;<sp/>hierarchy;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::findContours(markers,<sp/>contours,<sp/>hierarchy,<sp/>CV_RETR_TREE,<sp/>CV_CHAIN_APPROX_SIMPLE,<sp/>cv::Point(0,<sp/>0)<sp/>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seeds<sp/>=<sp/>cv::Mat::zeros(markers.size(),<sp/>CV_8UC1);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_seed<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;<sp/>contours.size();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::drawContours(seeds,<sp/>contours,<sp/>i,<sp/>uchar(num_seed++),<sp/>-1,<sp/>8,<sp/>hierarchy,<sp/>0,<sp/>cv::Point()<sp/>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seeds.convertTo(seeds,<sp/>CV_32SC1);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::uvt(ucm,<sp/>seeds,<sp/>boundary,<sp/>labels,<sp/>SINGLE_SIZE);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::imshow(</highlight><highlight class="stringliteral">&quot;boundary&quot;</highlight><highlight class="normal">,<sp/>boundary*255);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::imshow(</highlight><highlight class="stringliteral">&quot;labels&quot;</highlight><highlight class="normal">,<sp/>labels*</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(255/num_seed));</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/diyang/Documents/gPb-master/opencv_gpb/src/main.cpp"/>
  </compounddef>
</doxygen>
